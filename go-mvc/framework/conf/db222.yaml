/**
 * name: db
 * author: jie
 * date: 2019-6-4
 * note: 数据库设置
 */

package conf

import (
	"fmt"
	//"github.com/kataras/golog"
	//"gopkg.in/yaml.v2"
	"github.com/go-yaml/yaml"
	"io/ioutil"
)

/*const DriverName = "mysql"

type DbConf struct {
	Host   string
	Port   int
	User   string
	Pwd    string
	DbName string
}

var MasterDbConfig DbConf = DbConf{
	Host:   "127.0.0.1",
	Port:   3306,
	User:   "root",
	Pwd:    "admin",
	DbName: "csms-system",
}

var SlaveDbConfig DbConf = DbConf{
	Host:   "127.0.0.1",
	Port:   3306,
	User:   "root",
	Pwd:    "admin",
	DbName: "csms-system",
}
*/

type DB struct {
	Master DbConf
	Slave  DbConf
}

type DbConf struct {
	Dialect      string `yaml:"dialect"`
	User         string `yaml:"user"`
	Password     string `yaml:"password"`
	Host         string `yaml:"host"`
	Port         int    `yaml:"port"`
	Database     string `yaml:"database"`
	Charset      string `yaml:"charset"`
	ShowSql      bool   `yaml:"showSql"`
	LogLevel     string `yaml:"logLevel"`
	MaxIdleConns int    `yaml:"maxIdleConns"`
	MaxOpenConns int    `yaml:"maxOpenConns"`

	//ParseTime       bool   `yaml:"parseTime"`
	//MaxIdleConns    int    `yaml:"maxIdleConns"`
	//MaxOpenConns    int    `yaml:"maxOpenConns"`
	//ConnMaxLifetime int64  `yaml:"connMaxLifetime: 10"`
	//Sslmode         string `yaml:"sslmode"`
}

func (c *DB) DBSetting() *DB {
	yamlFile, err := ioutil.ReadFile("db.yaml")

	if err != nil {
		fmt.Println(err.Error())
	}

	if err = yaml.Unmarshal(yamlFile, c); err != nil {
		fmt.Println(err.Error())
	}

	return c
}
